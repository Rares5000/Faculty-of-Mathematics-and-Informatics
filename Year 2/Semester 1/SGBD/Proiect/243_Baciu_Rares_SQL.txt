---------------------------------------------------------------------Cerinta 4
CREATE TABLE JUCATORI(
    jucator_id NUMBER(10) PRIMARY KEY,
    nume VARCHAR(20) NOT NULL,
    prenume VARCHAR(20) NOT NULL,
    pozitie VARCHAR(20) NOT NULL,
    numar_tricou NUMBER(5) NOT NULL 
);

ALTER TABLE JUCATORI
ADD CHECK (numar_tricou >= 1 AND numar_tricou <= 99);

CREATE TABLE ECHIPE(
    echipa_id NUMBER(10) PRIMARY KEY,
    nume VARCHAR(20) NOT NULL,
    stadion VARCHAR(20) NOT NULL,
    nr_trofee NUMBER(5),
    patron_id NUMBER(10) NOT NULL
);


CREATE TABLE PATRON(
    patron_id NUMBER(10) PRIMARY KEY,
    nume VARCHAR(20) NOT NULL,
    prenume VARCHAR(20) NOT NULL
);


CREATE TABLE ANTRENORI(
    antrenor_id NUMBER(10) PRIMARY KEY,
    nume VARCHAR(20) NOT NULL,
    prenume VARCHAR(20) NOT NULL,
    specializare VARCHAR(20) NOT NULL
);

CREATE TABLE ARBITRI(
    arbitru_id NUMBER(10) PRIMARY KEY,
    nume VARCHAR(20) NOT NULL,
    prenume VARCHAR(20) NOT NULL
);


CREATE TABLE FEDERATII(
    federatie_id NUMBER(10) PRIMARY KEY,
    nume VARCHAR(20) NOT NULL,
    presedinte VARCHAR(20) NOT NULL
);

CREATE TABLE COMPETITII(
    competitie_id NUMBER(10) PRIMARY KEY,
    tara VARCHAR(20) NOT NULL,
    data_inceput DATE NOT NULL,
    data_final DATE NOT NULL,
    sponsor VARCHAR(20) 
);

ALTER TABLE COMPETITII
ADD nume VARCHAR(20) NOT NULL;

CREATE TABLE ETAPE(
    etapa_id NUMBER(10) PRIMARY KEY,
    competitie_id NUMBER(10) NOT NULL
);

CREATE TABLE ANTRENEAZA(
    echipa_id NUMBER(10),
    antrenor_id NUMBER(10),
    jucator_id NUMBER(10),
    data_antrenament DATE NOT NULL,
    tip_antrenament VARCHAR(20)  NOT NULL,
    CONSTRAINT pk_antr PRIMARY KEY(echipa_id, antrenor_id, jucator_id)
);

CREATE TABLE TRANSFERA(
    echipa_id NUMBER(10),
    patron_id NUMBER(10),
    jucator_id NUMBER(10),
    suma_transfer FLOAT(10),
    nume_agent VARCHAR(20) NOT NULL
);

ALTER TABLE TRANSFERA
ADD CONSTRAINT pk_transf PRIMARY KEY(echipa_id, jucator_id, patron_id);

CREATE TABLE JOACA_MECIURI(
    etapa_id NUMBER(10),
    arbitru_id NUMBER(10),
    gazda NUMBER(10) NOT NULL,
    oaspete NUMBER(10) NOT NULL,
    data_meci DATE NOT NULL,
    stadion VARCHAR(20) NOT NULL,
    CONSTRAINT pk_jm PRIMARY KEY(etapa_id, arbitru_id)
);

CREATE TABLE LEGITIMEAZA(
    echipa_id NUMBER(10),
    jucator_id NUMBER(10),
    salariu FLOAT(10), 
    ani_contract NUMBER(10) NOT NULL,
    CONSTRAINT pk_legit PRIMARY KEY(echipa_id, jucator_id),
    CHECK (ani_contract >=1 AND ani_contract <= 6)
);

CREATE TABLE PARTICIPA(
    echipa_id NUMBER(10),
    competitie_id NUMBER(10),
    poz_clasament NUMBER(10) NOT NULL,
    puncte NUMBER(10),
    goluri_marcate NUMBER(10),
    goluri_primite NUMBER(10),
    CONSTRAINT pk_participa PRIMARY KEY(echipa_id, competitie_id),
    CHECK (poz_clasament >=1 AND poz_clasament <=20)
);

CREATE TABLE ORGANIZEAZA(
    federatie_id NUMBER(10),
    competitie_id NUMBER(10),
    CONSTRAINT pk_org PRIMARY KEY(federatie_id, competitie_id)
);

CREATE TABLE ANGAJEAZA(
    federatie_id NUMBER(10),
    arbitru_id NUMBER(10),
    salariu FLOAT(10),
    ani_contract NUMBER(10) NOT NULL,
    CONSTRAINT pk_ang PRIMARY KEY(federatie_id, arbitru_id),
    CHECK(ani_contract >= 1 AND ani_contract <= 6)
);

---------------------------------------------------------------------Cerinta 5
INSERT INTO JUCATORI
values(1, 'BACIU','RARES','ATACANT','10');

INSERT INTO JUCATORI
values(2, 'BOT','GEORGE','ATACANT','9');

INSERT INTO JUCATORI
values(3, 'DAN','DOD','MIJLOCAS','7');

INSERT INTO JUCATORI
values(4, 'DONIU','CRISTIAN','PORTAR','1');

INSERT INTO JUCATORI
values(5, 'MERCU','ADELIN','MIJLOCAS','18');

INSERT INTO JUCATORI
values(6, 'ADONIS','TIK','FUNDAS','4');

INSERT INTO JUCATORI
values(7, 'OBREZ','MERCAN','ATACANT','9');

INSERT INTO JUCATORI
values(8, 'DENNIS','MANN','ATACANT','10');

INSERT INTO JUCATORI
values(9, 'IANIS','HAGI','MIJLOCAS','20');

INSERT INTO JUCATORI
values(10, 'PAULO','VINICIUS','FUNDAS','4');

INSERT INTO ECHIPE
values(1,'DINAMO BUCURESTI','STEFAN CEL MARE',18,1);

INSERT INTO ECHIPE
values(2,'FC VASLUI','MUNICIPAL',100,2);

INSERT INTO ECHIPE
values(3,'FCSB','NATIONAL ARENA',17,3);

INSERT INTO ECHIPE
values(4,'RAPID BUCURESTI','GIULESTI',10,4);

INSERT INTO ECHIPE
values(5,'CFR CLUJ','DAN PALTINISANU',7,5);

INSERT INTO ARBITRI
values(1,'ISTVAN ','KOVACS');

INSERT INTO ARBITRI
values(2,'OVIDIU','HATEGAN');


INSERT INTO ARBITRI
values(3,'SEBASTIAN','COLTESCU');

INSERT INTO COMPETITII
values(1,'ROMANIA','10-AUG-22','10-JUN-22','BERGENBIER','LIGA 1');

INSERT INTO COMPETITII
values(2,'ANGLIA','11-AUG-22','10-MAY-22','BARCLAYS','PREMIER LEAGUE');


INSERT INTO COMPETITII
values(3,'ITALIA','9-AUG-22','15-JUN-22','TM','SERIE A');


INSERT INTO COMPETITII
values(4,'GERMANIA','12-AUG-22','12-JUN-22','BBVA','LA LIGA');

INSERT INTO COMPETITII
values(5,'FRANTA','14-AUG-22','12-MAY-22','UBER EATS','LIGUE ONE');

INSERT INTO ANTRENORI
values(1,'DAN','PETRESCU','PRINCIPAL');

INSERT INTO ANTRENORI
values(2,'MIRCEA','LUCESCU','PRINCIPAL');

INSERT INTO ANTRENORI
values(3,'VASILE','CONSTANTIN','FITNESS');

INSERT INTO ANTRENORI
values(4,'CATALIN','STRATON','PORTARI');

INSERT INTO ANTRENORI
values(5, 'LAURENTIU', 'REGHECAMPF', 'PRINCIPAL');

INSERT INTO FEDERATII
values(1,'FRF','RAZVAN BURLEANU');

INSERT INTO FEDERATII
values(2,'FIFA','GIANNI INFANTINO');

INSERT INTO PATRON
values(1,'BORCEA','CRISTI');

INSERT INTO PATRON
values(2,'PORUMBOIU','ADRIAN');

INSERT INTO PATRON
values(3,'BECALI','GIGI');

INSERT INTO PATRON
values(4,'PANCU','DANIEL');

INSERT INTO PATRON
values(5,'MURESAN','IULIU');

INSERT INTO ETAPE
values(1,1);

INSERT INTO ETAPE
values(2,1);

INSERT INTO ETAPE
values(3,1);

INSERT INTO ETAPE
values(4,1);

INSERT INTO ETAPE
values(5,1);

INSERT INTO ETAPE
values(6,2);

INSERT INTO ETAPE
values(7,2);

INSERT INTO ETAPE
values(8,3);

INSERT INTO ANGAJEAZA
values(1,1,3000,4);

INSERT INTO ANGAJEAZA
values(1,2,2000,5);

INSERT INTO ANGAJEAZA
values(1,3,3500,6);

INSERT INTO ANTRENEAZA
values(1,4,4,'10-AUG-2022','fitness');

INSERT INTO ANTRENEAZA
values(1,3,3,'10-AUG-2022','rezistenta');

INSERT INTO ANTRENEAZA
values(1,3,1,'10-AUG-2022','shooting');

INSERT INTO ANTRENEAZA
values(1,2,2,'10-AUG-2022','passing');

INSERT INTO ANTRENEAZA
values(1,2,5,'10-AUG-2022','rezistenta');

INSERT INTO ANTRENEAZA
values(1,2,6,'10-AUG-2022','defending');

INSERT INTO ANTRENEAZA
values(1,4,4,'10-AUG-2022','fitness');

INSERT INTO ANTRENEAZA
values(3,5,9,'10-AUG-2022','passing');

INSERT INTO ANTRENEAZA
values(3,5,10,'11-AUG-2022','defending');

INSERT INTO ANTRENEAZA
values(3,5,8,'10-AUG-2022','shooting');

INSERT INTO ANTRENEAZA
values(3,5,7,'11-AUG-2022','rezistanta');

INSERT INTO LEGITIMEAZA
values(1,1,999999.9,5);

INSERT INTO LEGITIMEAZA
values(1,2,999.9,3);

INSERT INTO LEGITIMEAZA
values(1,3,2000,2);

INSERT INTO LEGITIMEAZA
values(1,4,1300.50,4);

INSERT INTO LEGITIMEAZA
values(1,5,1500,4);

INSERT INTO LEGITIMEAZA
values(1,6,3000,3);

INSERT INTO LEGITIMEAZA
values(3,7,2000,3);

INSERT INTO LEGITIMEAZA
values(3,8,7000,1);

INSERT INTO LEGITIMEAZA
values(3,9,8000,2);

INSERT INTO LEGITIMEAZA
values(3,10,5000,4);

INSERT INTO PARTICIPA
values(1,1,1,90,50,0);


INSERT INTO PARTICIPA
values(2,1,2,89,49,1);


INSERT INTO PARTICIPA
values(3,1,3,40,22,45);


INSERT INTO PARTICIPA
values(4,1,4,30,30,40);


INSERT INTO PARTICIPA
values(5,1,5,10,12,57);

INSERT INTO ORGANIZEAZA
values(1,1);

INSERT INTO ORGANIZEAZA
values(2,2);

INSERT INTO ORGANIZEAZA
values(2,3);

INSERT INTO ORGANIZEAZA
values(2,4);

INSERT INTO ORGANIZEAZA
values(2,5);

INSERT INTO TRANSFERA
values(1,2,1,500000,'FABRIZIO ROMANO');

INSERT INTO TRANSFERA
values(1,2,2,2200,'AGENT 007');

INSERT INTO TRANSFERA
values(1,2,3,45000,'FABRIZIO ROMANO');

INSERT INTO TRANSFERA
values(1,2,4,0,'AGENT 001');

INSERT INTO TRANSFERA
values(1,2,5,3000,'JUSTITIARU');

INSERT INTO TRANSFERA
values(3,3,7,3200,'AGENT 007');

INSERT INTO TRANSFERA
values(3,3,8,5500,'VICTOR BECALI');

INSERT INTO TRANSFERA
values(3,3,9,20000,'VICTOR BECALI');

INSERT INTO TRANSFERA
values(3,3,10,12000,'VICTOR BECALI');

INSERT INTO JOACA_MECIURI
values(1,2,1,3,'11-APR-2002','STEFAN CEL MARE');

INSERT INTO JOACA_MECIURI
values(2,1,1,2,'17-APR-2002','STEFAN CEL MARE');

INSERT INTO JOACA_MECIURI
values(3,3,1,4,'20-APR-2002','STEFAN CEL MARE');

INSERT INTO JOACA_MECIURI
values(4,1,2,1,'30-APR-2002','MUNICIPAL');

INSERT INTO JOACA_MECIURI
values(5,2,2,3,'11-MAY-2002','MUNICIPAL');

INSERT INTO JOACA_MECIURI
values(6,3,3,5,'18-MAY-2002','ARENA NATIONALA');

INSERT INTO JOACA_MECIURI
values(7,1,5,1,'25-MAY-2002','DAN PALTINISANU');

INSERT INTO JOACA_MECIURI
values(8,3,4,2,'29-MAY-2002','GIULESTI');

INSERT INTO JUCATORI
values(11, 'ANDU','BRAN','REZERVA','18');

INSERT INTO JUCATORI
values(12, 'DANI','GRUPA','MIJLOCAS','8');

INSERT INTO LEGITIMEAZA
values(2,11,NULL,1);

INSERT INTO LEGITIMEAZA
values(2,12,NULL,2);

---------------------------------------------------------------------Cerinta 6

CREATE OR REPLACE PROCEDURE analiza_performanta AS 
  TYPE t_varray IS VARRAY(100) OF Jucatori.jucator_id%TYPE;
  jucatori_goluri t_varray := t_varray();
  
  TYPE t_nested_table IS TABLE OF Jucatori.jucator_id%TYPE;
  jucatori_mijlocasi t_nested_table := t_nested_table();
  
  TYPE t_index_by_table IS TABLE OF Transfera.suma_transfer%TYPE INDEX BY PLS_INTEGER;
  transferuri t_index_by_table;
  
  v_suma_transfer Transfera.suma_transfer%TYPE;
  v_echipa_id Echipe.echipa_id%TYPE;
BEGIN 
  BEGIN
    SELECT echipa_id INTO v_echipa_id FROM Echipe WHERE nume = 'FC VASLUI';
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('Nu a fost găsită nicio echipă cu numele specificat.');
      RETURN;
  END;
  
  -- Colectarea ID-urilor jucatorilor cu salarii peste 10000 din echipa specificata
  BEGIN
    SELECT jucator_id BULK COLLECT INTO jucatori_goluri FROM Legitimeaza WHERE echipa_id = v_echipa_id AND salariu > 10000;

    IF jucatori_goluri.COUNT = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Nu au fost găsiți jucători cu salarii mai mari de 10000 în echipa specificată.');
    ELSE
      FOR i IN 1..jucatori_goluri.COUNT LOOP
        BEGIN
          SELECT suma_transfer INTO v_suma_transfer FROM Transfera WHERE jucator_id = jucatori_goluri(i);
          transferuri(i) := v_suma_transfer;
          DBMS_OUTPUT.PUT_LINE('Jucatorul cu ID ' || jucatori_goluri(i) || ' a fost transferat pentru suma de ' || v_suma_transfer);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nu a fost găsit niciun transfer pentru jucătorul cu ID ' || jucatori_goluri(i) || '.');
        END;
      END LOOP;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('A apărut o eroare.');
  END;
  
  -- Colectarea ID-urilor jucatorilor mijlocasi si afisarea informatiilor despre acestia
  BEGIN
    SELECT jucator_id BULK COLLECT INTO jucatori_mijlocasi FROM Jucatori WHERE pozitie = 'MIJLOCAS';
    IF jucatori_mijlocasi.COUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Nu au fost găsiți jucători mijlocași.');
    ELSE
        FOR i IN 1..jucatori_mijlocasi.COUNT LOOP
          DBMS_OUTPUT.PUT_LINE('Jucatorul cu ID ' || jucatori_mijlocasi(i) || ' este mijlocas.');
        END LOOP;
    END IF;
  END;
  
END;
/

BEGIN
  analiza_performanta;
END;
/

---------------------------------------------------------------------Cerinta 7

CREATE OR REPLACE PROCEDURE show_players_same_position(p_jucator_id IN NUMBER)
IS
    CURSOR c1 IS 
        SELECT jucator_id, nume, prenume, pozitie, numar_tricou 
        FROM JUCATORI
        WHERE jucator_id = p_jucator_id;

    player_data JUCATORI%ROWTYPE;

    TYPE t_player_data IS RECORD(
        nume JUCATORI.nume%TYPE,
        prenume JUCATORI.prenume%TYPE,
        pozitie JUCATORI.pozitie%TYPE,
        numar_tricou JUCATORI.numar_tricou%TYPE
    );

    -- Cursor parametrizat pentru selectarea jucatorilor cu aceeasi pozitie, excluzand jucatorul initial
    CURSOR c2 (p_pozitie VARCHAR2) IS 
        SELECT nume, prenume, pozitie, numar_tricou
        FROM JUCATORI
        WHERE pozitie = p_pozitie AND jucator_id <> p_jucator_id;

    player_same_position t_player_data;
    found_other_players BOOLEAN := FALSE;

BEGIN
    -- Deschiderea cursorului c1 si extragerea datelor despre jucatorul specificat
    OPEN c1;
    FETCH c1 INTO player_data;
    IF c1%NOTFOUND THEN
        DBMS_OUTPUT.PUT_LINE('Jucatorul cu ID-ul ' || p_jucator_id || ' nu exista.');
        CLOSE c1;
        RETURN;
    END IF;
    CLOSE c1;

    DBMS_OUTPUT.PUT_LINE('Jucatorul initial:');
    DBMS_OUTPUT.PUT_LINE('----------------');
    DBMS_OUTPUT.PUT_LINE(player_data.nume || ' ' || player_data.prenume);
    DBMS_OUTPUT.PUT_LINE('Pozitie: ' || player_data.pozitie);
    DBMS_OUTPUT.PUT_LINE('Numar tricou: ' || player_data.numar_tricou);

    -- Deschiderea cursorului c2 cu pozitia jucatorului specificat si afisarea altor jucatori cu aceeasi pozitie
    OPEN c2(player_data.pozitie);
    LOOP
        FETCH c2 INTO player_same_position;
        EXIT WHEN c2%NOTFOUND;
        IF NOT found_other_players THEN
            DBMS_OUTPUT.PUT_LINE('Alti jucatori cu aceeasi pozitie:');
            found_other_players := TRUE;
        END IF;
        
        DBMS_OUTPUT.PUT_LINE('----------------');
        DBMS_OUTPUT.PUT_LINE(player_same_position.nume || ' ' || player_same_position.prenume);
        DBMS_OUTPUT.PUT_LINE('Pozitie: ' || player_same_position.pozitie);
        DBMS_OUTPUT.PUT_LINE('Numar tricou: ' || player_same_position.numar_tricou);
    END LOOP;
    CLOSE c2;

    IF NOT found_other_players THEN
        DBMS_OUTPUT.PUT_LINE('Nu exista alti jucatori cu aceeasi pozitie.');
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Nu s-au gasit date.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('A aparut o eroare: ' || SQLERRM);
END;
/

BEGIN
    show_players_same_position(3);
END;
/

---------------------------------------------------------------------Cerinta 8

CREATE OR REPLACE FUNCTION verifica_echipa6 (nume_echipa VARCHAR)
RETURN VARCHAR2 IS
    salariu_maxim NUMBER;
    numar_jucatori NUMBER;
    pozitie_max_salariu VARCHAR2(100);
    
    echipa_subevaluata EXCEPTION;
    jucatori_insuficienti EXCEPTION;

BEGIN
    -- Selectarea salariului maxim din echipa
    SELECT MAX(L.salariu) INTO salariu_maxim
    FROM Legitimeaza L
    JOIN Echipe E ON L.echipa_id = E.echipa_id
    WHERE E.nume = nume_echipa;

    -- Determinarea pozitiei jucatorului cu salariul maxim
    SELECT J.pozitie INTO pozitie_max_salariu
    FROM Jucatori J
    JOIN Legitimeaza L ON J.jucator_id = L.jucator_id
    JOIN Echipe E ON L.echipa_id = E.echipa_id
    WHERE E.nume = nume_echipa AND L.salariu = salariu_maxim;

    -- Calculul numarului total de jucatori din echipa specificata
    SELECT COUNT(L.jucator_id) INTO numar_jucatori
    FROM Legitimeaza L
    JOIN Echipe E ON L.echipa_id = E.echipa_id
    WHERE E.nume = nume_echipa;

    -- Verifica daca echipa are suficienti jucatori
    IF numar_jucatori <= 5 THEN
        RAISE jucatori_insuficienti;
    END IF;

    -- Verifica daca salariul maxim nu este suficient sau daca jucatorul cu salariul maxim nu este atacant
    IF salariu_maxim <= 30000 OR pozitie_max_salariu != 'ATACANT' THEN
        RAISE echipa_subevaluata;
    END IF;

    RETURN 'Echipa este in regula.';

EXCEPTION
    WHEN jucatori_insuficienti THEN
        RETURN 'Jucatori insuficienti pentru campionat.';
    WHEN echipa_subevaluata THEN
        RETURN 'Echipa este subevaluata, nu poate juca in campionat.';
    WHEN OTHERS THEN
        RETURN 'A aparut o eroare.';
END;
/

DECLARE
    rezultat VARCHAR2(100);
BEGIN
    rezultat := verifica_echipa6('DINAMO BUCURESTI');
    DBMS_OUTPUT.PUT_LINE(rezultat);
END;
/

---------------------------------------------------------------------Cerinta 9

CREATE OR REPLACE FUNCTION verifica_echipa6 (nume_echipa VARCHAR)
RETURN VARCHAR2 IS
    salariu_maxim NUMBER;
    numar_jucatori NUMBER;
    pozitie_max_salariu VARCHAR2(100);
    
    echipa_subevaluata EXCEPTION;
    jucatori_insuficienti EXCEPTION;

BEGIN
    -- Selectarea salariului maxim din echipa
    SELECT MAX(L.salariu) INTO salariu_maxim
    FROM Legitimeaza L
    JOIN Echipe E ON L.echipa_id = E.echipa_id
    WHERE E.nume = nume_echipa;

    -- Determinarea pozitiei jucatorului cu salariul maxim
    SELECT J.pozitie INTO pozitie_max_salariu
    FROM Jucatori J
    JOIN Legitimeaza L ON J.jucator_id = L.jucator_id
    JOIN Echipe E ON L.echipa_id = E.echipa_id
    WHERE E.nume = nume_echipa AND L.salariu = salariu_maxim;

    -- Calculul numarului total de jucatori din echipa specificata
    SELECT COUNT(L.jucator_id) INTO numar_jucatori
    FROM Legitimeaza L
    JOIN Echipe E ON L.echipa_id = E.echipa_id
    WHERE E.nume = nume_echipa;

    -- Verifica daca echipa are suficienti jucatori
    IF numar_jucatori <= 5 THEN
        RAISE jucatori_insuficienti;
    END IF;

    -- Verifica daca salariul maxim nu este suficient sau daca jucatorul cu salariul maxim nu este atacant
    IF salariu_maxim <= 30000 OR pozitie_max_salariu != 'ATACANT' THEN
        RAISE echipa_subevaluata;
    END IF;

    RETURN 'Echipa este in regula.';

EXCEPTION
    WHEN jucatori_insuficienti THEN
        RETURN 'Jucatori insuficienti pentru campionat.';
    WHEN echipa_subevaluata THEN
        RETURN 'Echipa este subevaluata, nu poate juca in campionat.';
    WHEN OTHERS THEN
        RETURN 'A aparut o eroare.';
END;
/

DECLARE
    rezultat VARCHAR2(100);
BEGIN
    rezultat := verifica_echipa6('DINAMO BUCURESTI');
    DBMS_OUTPUT.PUT_LINE(rezultat);
END;
/

---------------------------------------------------------------------Cerinta 10

CREATE OR REPLACE TRIGGER prevent_edit_on_working_days
BEFORE INSERT OR DELETE OR UPDATE ON FEDERATII
BEGIN
  IF (TO_CHAR(SYSDATE,'DY') IN ('MON','SAT','SUN')) THEN
    RAISE_APPLICATION_ERROR(-20001,'Nu poti modifica tabelul Federatii in zilele: luni, sambata, duminica.');
  END IF; 
END;

---------------------------------------------------------------------Cerinta 11

CREATE OR REPLACE TRIGGER prevent_delete_played_matches
BEFORE DELETE ON Joaca_Meciuri
FOR EACH ROW
BEGIN
  IF :old.data_meci < SYSDATE THEN
    raise_application_error(-20001, 'Nu poti sterge meciuri care au avut loc deja.');
  END IF;
END;
/

SELECT * FROM JOACA_MECIURI;

DELETE FROM Joaca_Meciuri
WHERE etapa_id = 5;

---------------------------------------------------------------------Cerinta 12
CREATE TABLE log_history
(
    username VARCHAR2(20),
    db_name VARCHAR2(20),
    event VARCHAR2(100),
    obj_name VARCHAR2(100)
);

CREATE OR REPLACE TRIGGER log_events
    AFTER CREATE OR DROP OR ALTER ON SCHEMA
BEGIN
    INSERT INTO log_history VALUES(SYS.LOGIN_USER, SYS.DATABASE_NAME, SYS.SYSEVENT, SYS.DICTIONARY_OBJ_NAME);
END;
/

SELECT * FROM log_history;

---------------------------------------------------------------------Cerinta 13

CREATE OR REPLACE PACKAGE PACHET_FOTBAL AS
    PROCEDURE ANALIZA_PERFORMANTA;
    PROCEDURE SHOW_PLAYERS_SAME_POSITION(p_jucator_id IN NUMBER);
    FUNCTION VERIFICA_ECHIPA6(nume_echipa VARCHAR) RETURN VARCHAR2;
    PROCEDURE AFISEAZA_INFO_JUCATOR(p_numar_tricou IN NUMBER);
END PACHET_FOTBAL;
/

CREATE OR REPLACE PACKAGE BODY PACHET_FOTBAL AS

    PROCEDURE ANALIZA_PERFORMANTA AS 
      TYPE t_varray IS VARRAY(100) OF Jucatori.jucator_id%TYPE;
      jucatori_goluri t_varray := t_varray();
      TYPE t_nested_table IS TABLE OF Jucatori.jucator_id%TYPE;
      jucatori_mijlocasi t_nested_table := t_nested_table();
      TYPE t_index_by_table IS TABLE OF Transfera.suma_transfer%TYPE INDEX BY PLS_INTEGER;
      transferuri t_index_by_table;
      v_suma_transfer Transfera.suma_transfer%TYPE;
      v_echipa_id Echipe.echipa_id%TYPE;
    BEGIN 
        BEGIN
            SELECT echipa_id INTO v_echipa_id FROM Echipe WHERE nume = 'FC VASLUI';
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              DBMS_OUTPUT.PUT_LINE('Nu a fost găsită nicio echipă cu numele specificat.');
              RETURN;
        END;
      -- Colectarea ID-urilor jucatorilor cu salarii peste 10000 din echipa specificata
      BEGIN
        SELECT jucator_id BULK COLLECT INTO jucatori_goluri FROM Legitimeaza WHERE echipa_id = v_echipa_id AND salariu > 10000;
    
        IF jucatori_goluri.COUNT = 0 THEN
          DBMS_OUTPUT.PUT_LINE('Nu au fost găsiți jucători cu salarii mai mari de 10000 în echipa specificată.');
        ELSE
          FOR i IN 1..jucatori_goluri.COUNT LOOP
            BEGIN
              SELECT suma_transfer INTO v_suma_transfer FROM Transfera WHERE jucator_id = jucatori_goluri(i);
              transferuri(i) := v_suma_transfer;
              DBMS_OUTPUT.PUT_LINE('Jucatorul cu ID ' || jucatori_goluri(i) || ' a fost transferat pentru suma de ' || v_suma_transfer);
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('Nu a fost găsit niciun transfer pentru jucătorul cu ID ' || jucatori_goluri(i) || '.');
            END;
          END LOOP;
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('A apărut o eroare.');
      END;
      -- Colectarea ID-urilor jucatorilor mijlocasi si afisarea informatiilor despre acestia
      BEGIN
        SELECT jucator_id BULK COLLECT INTO jucatori_mijlocasi FROM Jucatori WHERE pozitie = 'MIJLOCAS';
        IF jucatori_mijlocasi.COUNT = 0 THEN
            DBMS_OUTPUT.PUT_LINE('Nu au fost găsiți jucători mijlocași.');
        ELSE
            FOR i IN 1..jucatori_mijlocasi.COUNT LOOP
              DBMS_OUTPUT.PUT_LINE('Jucatorul cu ID ' || jucatori_mijlocasi(i) || ' este mijlocas.');
            END LOOP;
        END IF;
        END;
    END ANALIZA_PERFORMANTA;

    PROCEDURE SHOW_PLAYERS_SAME_POSITION(p_jucator_id IN NUMBER) IS
        CURSOR c1 IS 
            SELECT jucator_id, nume, prenume, pozitie, numar_tricou 
            FROM JUCATORI
            WHERE jucator_id = p_jucator_id;
    
        player_data JUCATORI%ROWTYPE;
    
        TYPE t_player_data IS RECORD(
            nume JUCATORI.nume%TYPE,
            prenume JUCATORI.prenume%TYPE,
            pozitie JUCATORI.pozitie%TYPE,
            numar_tricou JUCATORI.numar_tricou%TYPE
        );
    
        -- Cursor parametrizat pentru selectarea jucatorilor cu aceeasi pozitie, excluzand jucatorul initial
        CURSOR c2 (p_pozitie VARCHAR2) IS 
            SELECT nume, prenume, pozitie, numar_tricou
            FROM JUCATORI
            WHERE pozitie = p_pozitie AND jucator_id <> p_jucator_id;
    
        player_same_position t_player_data;
        found_other_players BOOLEAN := FALSE;

    BEGIN
        -- Deschiderea cursorului c1 si extragerea datelor despre jucatorul specificat
        OPEN c1;
        FETCH c1 INTO player_data;
        IF c1%NOTFOUND THEN
            DBMS_OUTPUT.PUT_LINE('Jucatorul cu ID-ul ' || p_jucator_id || ' nu exista.');
            CLOSE c1;
            RETURN;
        END IF;
        CLOSE c1;
    
        DBMS_OUTPUT.PUT_LINE('Jucatorul initial:');
        DBMS_OUTPUT.PUT_LINE('----------------');
        DBMS_OUTPUT.PUT_LINE(player_data.nume || ' ' || player_data.prenume);
        DBMS_OUTPUT.PUT_LINE('Pozitie: ' || player_data.pozitie);
        DBMS_OUTPUT.PUT_LINE('Numar tricou: ' || player_data.numar_tricou);
    
        -- Deschiderea cursorului c2 cu pozitia jucatorului specificat si afisarea altor jucatori cu aceeasi pozitie
        OPEN c2(player_data.pozitie);
        LOOP
            FETCH c2 INTO player_same_position;
            EXIT WHEN c2%NOTFOUND;
            IF NOT found_other_players THEN
                DBMS_OUTPUT.PUT_LINE('Alti jucatori cu aceeasi pozitie:');
                found_other_players := TRUE;
            END IF;
            
            DBMS_OUTPUT.PUT_LINE('----------------');
            DBMS_OUTPUT.PUT_LINE(player_same_position.nume || ' ' || player_same_position.prenume);
            DBMS_OUTPUT.PUT_LINE('Pozitie: ' || player_same_position.pozitie);
            DBMS_OUTPUT.PUT_LINE('Numar tricou: ' || player_same_position.numar_tricou);
        END LOOP;
        CLOSE c2;
    
        IF NOT found_other_players THEN
            DBMS_OUTPUT.PUT_LINE('Nu exista alti jucatori cu aceeasi pozitie.');
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nu s-au gasit date.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('A aparut o eroare: ' || SQLERRM);

    END SHOW_PLAYERS_SAME_POSITION;

    FUNCTION VERIFICA_ECHIPA6(nume_echipa VARCHAR) RETURN VARCHAR2 IS
    
      salariu_maxim NUMBER;
      numar_jucatori NUMBER;
      pozitie_max_salariu VARCHAR2(100);
      echipa_subevaluata EXCEPTION;
      jucatori_insuficienti EXCEPTION;
    BEGIN
            -- Selectarea salariului maxim din echipa
            SELECT MAX(L.salariu) INTO salariu_maxim
            FROM Legitimeaza L
            JOIN Echipe E ON L.echipa_id = E.echipa_id
            WHERE E.nume = nume_echipa;
        
            -- Determinarea pozitiei jucatorului cu salariul maxim
            SELECT J.pozitie INTO pozitie_max_salariu
            FROM Jucatori J
            JOIN Legitimeaza L ON J.jucator_id = L.jucator_id
            JOIN Echipe E ON L.echipa_id = E.echipa_id
            WHERE E.nume = nume_echipa AND L.salariu = salariu_maxim;
        
            -- Calculul numarului total de jucatori din echipa specificata
            SELECT COUNT(L.jucator_id) INTO numar_jucatori
            FROM Legitimeaza L
            JOIN Echipe E ON L.echipa_id = E.echipa_id
            WHERE E.nume = nume_echipa;
        
            -- Verifica daca echipa are suficienti jucatori
            IF numar_jucatori <= 5 THEN
                RAISE jucatori_insuficienti;
            END IF;
        
            -- Verifica daca salariul maxim nu este suficient sau daca jucatorul cu salariul maxim nu este atacant
            IF salariu_maxim <= 30000 OR pozitie_max_salariu != 'ATACANT' THEN
                RAISE echipa_subevaluata;
            END IF;
        
            RETURN 'Echipa este in regula.';
        
        EXCEPTION
            WHEN jucatori_insuficienti THEN
                RETURN 'Jucatori insuficienti pentru campionat.';
            WHEN echipa_subevaluata THEN
                RETURN 'Echipa este subevaluata, nu poate juca in campionat.';
            WHEN OTHERS THEN
                RETURN 'A aparut o eroare.';
    
    END VERIFICA_ECHIPA6;
    
    PROCEDURE AFISEAZA_INFO_JUCATOR(p_numar_tricou IN NUMBER) IS
        v_nume_jucator VARCHAR(20);
        v_prenume_jucator VARCHAR(20);
        v_nume_echipa VARCHAR(20);
        v_nume_patron VARCHAR(20);
        v_prenume_patron VARCHAR(20);
        v_tip_antrenament VARCHAR(20);
        v_nume_antrenor VARCHAR(20);
        v_prenume_antrenor VARCHAR(20);
    BEGIN
        SELECT j.nume, j.prenume, e.nume, p.nume, p.prenume, a.tip_antrenament, an.nume, an.prenume
        INTO v_nume_jucator, v_prenume_jucator, v_nume_echipa, v_nume_patron, v_prenume_patron, v_tip_antrenament, v_nume_antrenor, v_prenume_antrenor
        FROM JUCATORI j
        JOIN LEGITIMEAZA l ON j.jucator_id = l.jucator_id
        JOIN ECHIPE e ON l.echipa_id = e.echipa_id
        JOIN PATRON p ON e.patron_id = p.patron_id
        JOIN ANTRENEAZA a ON e.echipa_id = a.echipa_id AND j.jucator_id = a.jucator_id
        JOIN ANTRENORI an ON a.antrenor_id = an.antrenor_id
        WHERE j.numar_tricou = p_numar_tricou;
    
        DBMS_OUTPUT.PUT_LINE('Jucator: ' || v_nume_jucator || ' ' || v_prenume_jucator);
        DBMS_OUTPUT.PUT_LINE('Echipa: ' || v_nume_echipa);
        DBMS_OUTPUT.PUT_LINE('Patron: ' || v_nume_patron || ' ' || v_prenume_patron);
        DBMS_OUTPUT.PUT_LINE('Tip Antrenament: ' || v_tip_antrenament);
        DBMS_OUTPUT.PUT_LINE('Antrenor: ' || v_nume_antrenor || ' ' || v_prenume_antrenor);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nu s-au gasit date pentru numarul de tricou ' || p_numar_tricou);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Prea multe randuri gasite pentru numarul de tricou ' || p_numar_tricou);
    END AFISEAZA_INFO_JUCATOR;

END PACHET_FOTBAL;
/

EXECUTE PACHET_FOTBAL.ANALIZA_PERFORMANTA;
EXECUTE PACHET_FOTBAL.SHOW_PLAYERS_SAME_POSITION(3);
SELECT PACHET_FOTBAL.VERIFICA_ECHIPA6('DINAMO BUCURESTI') from dual;
DECLARE
    rezultat VARCHAR2(100);
BEGIN
    rezultat := PACHET_FOTBAL.VERIFICA_ECHIPA6('DINAMO BUCURESTI');
    DBMS_OUTPUT.PUT_LINE(rezultat);
END;
/
EXECUTE PACHET_FOTBAL.AFISEAZA_INFO_JUCATOR(1);

